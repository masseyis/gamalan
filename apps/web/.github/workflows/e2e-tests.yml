name: E2E Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  e2e-tests:
    name: E2E Tests (Chrome)
    runs-on: ubuntu-latest
    timeout-minutes: 60

    services:
      # Add database service if needed for backend tests
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: battra_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}

      - name: Start backend services
        run: |
          # Start required backend services in background
          # This would start your Rust microservices
          echo "Starting backend services..."
          # docker-compose -f docker-compose.test.yml up -d
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/battra_test

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."
          sleep 10
          # Add health checks for your services

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}
          E2E_CLERK_USER_USERNAME: ${{ secrets.E2E_CLERK_USER_USERNAME }}
          E2E_CLERK_USER_PASSWORD: ${{ secrets.E2E_CLERK_USER_PASSWORD }}
          NEXT_PUBLIC_ENABLE_MOCK_AUTH: 'true'
          NEXT_PUBLIC_ENABLE_MOCK_DATA: 'true'
          NEXT_PUBLIC_PROJECTS_API_URL: 'http://localhost:8001'
          NEXT_PUBLIC_BACKLOG_API_URL: 'http://localhost:8002'
          NEXT_PUBLIC_READINESS_API_URL: 'http://localhost:8003'
          NEXT_PUBLIC_PROMPT_BUILDER_API_URL: 'http://localhost:8004'
          NEXT_PUBLIC_ENABLE_AI_FEATURES: 'true'

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: test-results/
          retention-days: 30

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-artifacts
          path: |
            playwright-report/
            tests/playwright/.clerk/
          retention-days: 30

      - name: Comment PR with test results
        uses: actions/github-script@v7
        if: always() && github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            try {
              const reportPath = path.join(process.cwd(), 'playwright-report', 'index.html');
              const testResultsPath = path.join(process.cwd(), 'test-results');

              let comment = '## 🎭 E2E Test Results\n\n';

              if (fs.existsSync(testResultsPath)) {
                const files = fs.readdirSync(testResultsPath);
                const hasFailures = files.some(file => file.includes('failed'));

                if (hasFailures) {
                  comment += '❌ Some E2E tests failed. Please check the artifacts for details.\n';
                } else {
                  comment += '✅ All E2E tests passed!\n';
                }

                comment += `\n📊 [View detailed test report](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n`;
              }

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Error posting comment:', error);
            }

  cross-browser-tests:
    name: Cross-Browser E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}

      - name: Run cross-browser tests
        run: pnpm playwright test --config=playwright.config.cross-browser.ts
        env:
          CI: true
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}
          E2E_CLERK_USER_USERNAME: ${{ secrets.E2E_CLERK_USER_USERNAME }}
          E2E_CLERK_USER_PASSWORD: ${{ secrets.E2E_CLERK_USER_PASSWORD }}
          NEXT_PUBLIC_ENABLE_MOCK_AUTH: 'true'
          NEXT_PUBLIC_ENABLE_MOCK_DATA: 'true'

      - name: Upload cross-browser results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cross-browser-report
          path: test-results/cross-browser-report/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Run performance tests
        run: pnpm playwright test tests/e2e/edge-cases/performance-stress.spec.ts
        env:
          CI: true
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}
          E2E_CLERK_USER_USERNAME: ${{ secrets.E2E_CLERK_USER_USERNAME }}
          E2E_CLERK_USER_PASSWORD: ${{ secrets.E2E_CLERK_USER_PASSWORD }}

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-report
          path: test-results/
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm playwright install --with-deps chromium

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: test

      - name: Run accessibility tests
        run: |
          # Install axe-playwright for accessibility testing
          pnpm add -D @axe-core/playwright

          # Run accessibility-specific tests
          pnpm playwright test --grep "accessibility|a11y" || echo "No specific accessibility tests found"
        env:
          CI: true
          NODE_ENV: test
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.E2E_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.E2E_CLERK_SECRET_KEY }}
          E2E_CLERK_USER_USERNAME: ${{ secrets.E2E_CLERK_USER_USERNAME }}
          E2E_CLERK_USER_PASSWORD: ${{ secrets.E2E_CLERK_USER_PASSWORD }}

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-report
          path: test-results/
          retention-days: 30

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [e2e-tests, cross-browser-tests, performance-tests, accessibility-tests]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create test summary
        run: |
          echo "# 🎭 E2E Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.e2e-tests.result }}" == "success" ]; then
            echo "✅ **E2E Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **E2E Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.cross-browser-tests.result }}" == "success" ]; then
            echo "✅ **Cross-Browser Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.cross-browser-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Cross-Browser Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Cross-Browser Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ **Performance Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.performance-tests.result }}" == "skipped" ]; then
            echo "⏭️ **Performance Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Performance Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [ "${{ needs.accessibility-tests.result }}" == "success" ]; then
            echo "✅ **Accessibility Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Accessibility Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 **Test Artifacts**: Available in the Actions tab" >> $GITHUB_STEP_SUMMARY