name: Pipeline Validation & Health Check

on:
  workflow_dispatch:
    inputs:
      validation_type:
        description: 'Type of validation to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - configuration-only
          - workflow-syntax-only
          - secrets-only
  schedule:
    # Run weekly pipeline validation on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

permissions:
  contents: read
  actions: read

jobs:
  # =============================================================================
  # WORKFLOW SYNTAX VALIDATION
  # =============================================================================
  
  validate-workflow-syntax:
    name: Validate Workflow Syntax
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.validation_type == 'full' || github.event.inputs.validation_type == 'workflow-syntax-only' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install actionlint
        run: |
          bash <(curl https://raw.githubusercontent.com/rhymond/actionlint/main/scripts/download-actionlint.bash)
          sudo mv ./actionlint /usr/local/bin/
          
      - name: Validate workflow syntax
        run: |
          echo "üîç Validating GitHub Actions workflow syntax..."
          
          # Run actionlint on all workflow files
          if actionlint .github/workflows/*.yml; then
            echo "‚úÖ All workflow files have valid syntax"
          else
            echo "‚ùå Workflow syntax validation failed"
            exit 1
          fi
          
      - name: Check for common workflow anti-patterns
        run: |
          echo "üîç Checking for common workflow anti-patterns..."
          
          # Check for hardcoded secrets
          echo "Checking for hardcoded secrets..."
          if grep -r -i "password\|secret\|key\|token" .github/workflows/ | grep -v "secrets\." | grep -v "inputs\." | grep -v "#" | grep -v "name:" | grep -v "description:"; then
            echo "‚ö†Ô∏è Potential hardcoded secrets found (review above)"
          else
            echo "‚úÖ No hardcoded secrets detected"
          fi
          
          # Check for missing timeout specifications
          echo "Checking for missing timeout specifications..."
          MISSING_TIMEOUTS=$(grep -L "timeout-minutes:" .github/workflows/*.yml | wc -l)
          if [ "$MISSING_TIMEOUTS" -gt 0 ]; then
            echo "‚ö†Ô∏è $MISSING_TIMEOUTS workflow files missing timeout specifications"
            grep -L "timeout-minutes:" .github/workflows/*.yml | sed 's/^/  - /'
          else
            echo "‚úÖ All workflow files have timeout specifications"
          fi
          
          # Check for overly broad permissions
          echo "Checking workflow permissions..."
          if grep -r "permissions:" .github/workflows/ | grep -i "write-all\|contents: write" | grep -v "deployments: write"; then
            echo "‚ö†Ô∏è Some workflows have elevated permissions - review if necessary"
          else
            echo "‚úÖ Workflow permissions appear appropriate"
          fi

  # =============================================================================
  # CONFIGURATION VALIDATION
  # =============================================================================
  
  validate-configuration:
    name: Validate Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event.inputs.validation_type == 'full' || github.event.inputs.validation_type == 'configuration-only' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate environment configurations
        run: |
          echo "üîç Validating environment configurations..."
          
          # Check for required .env.example files
          echo "Checking for .env.example files..."
          if [ -f ".env.example" ]; then
            echo "‚úÖ Root .env.example found"
          else
            echo "‚ö†Ô∏è Root .env.example not found"
          fi
          
          if [ -f "apps/web/.env.example" ]; then
            echo "‚úÖ Frontend .env.example found"
          else
            echo "‚ö†Ô∏è Frontend .env.example not found"
          fi
          
          # Validate Shuttle.toml configurations
          echo "Checking Shuttle.toml configurations..."
          SHUTTLE_CONFIGS=$(find services -name "Shuttle.toml" 2>/dev/null | wc -l)
          echo "Found $SHUTTLE_CONFIGS Shuttle.toml files"
          
          if [ "$SHUTTLE_CONFIGS" -eq 0 ]; then
            echo "‚ö†Ô∏è No Shuttle.toml configurations found"
          else
            find services -name "Shuttle.toml" | while read -r config; do
              echo "Validating $config..."
              if grep -q "name =" "$config" && grep -q "version =" "$config"; then
                echo "‚úÖ $config has required fields"
              else
                echo "‚ùå $config missing required fields"
              fi
            done
          fi
          
      - name: Validate package configurations
        run: |
          echo "üîç Validating package configurations..."
          
          # Check Cargo.toml workspace configuration
          if [ -f "Cargo.toml" ]; then
            echo "‚úÖ Root Cargo.toml found"
            if grep -q "\[workspace\]" Cargo.toml; then
              echo "‚úÖ Workspace configuration present"
            else
              echo "‚ö†Ô∏è No workspace configuration found"
            fi
          else
            echo "‚ùå Root Cargo.toml not found"
          fi
          
          # Check package.json in frontend
          if [ -f "apps/web/package.json" ]; then
            echo "‚úÖ Frontend package.json found"
          else
            echo "‚ùå Frontend package.json not found"
          fi
          
      - name: Validate documentation structure
        run: |
          echo "üîç Validating documentation structure..."
          
          # Check for required documentation
          REQUIRED_DOCS=(
            "README.md"
            "docs/deployment/SECRETS_CONFIGURATION.md"
            "docs/deployment/PIPELINE_ARCHITECTURE.md"
          )
          
          for doc in "${REQUIRED_DOCS[@]}"; do
            if [ -f "$doc" ]; then
              echo "‚úÖ $doc found"
            else
              echo "‚ùå $doc missing"
            fi
          done

  # =============================================================================
  # WORKFLOW DEPENDENCIES VALIDATION
  # =============================================================================
  
  validate-workflow-dependencies:
    name: Validate Workflow Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.validation_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check workflow dependencies
        run: |
          echo "üîç Validating workflow dependencies..."
          
          # Check for action version consistency
          echo "Checking GitHub Action versions..."
          
          # Extract all action uses from workflows
          grep -h "uses:" .github/workflows/*.yml | sort | uniq -c | sort -nr > action_usage.txt
          
          echo "Most frequently used actions:"
          head -10 action_usage.txt
          
          # Check for outdated common actions
          echo ""
          echo "Checking for potentially outdated actions..."
          
          if grep -r "actions/checkout@v3" .github/workflows/; then
            echo "‚ö†Ô∏è Some workflows use actions/checkout@v3 - consider upgrading to v4"
          fi
          
          if grep -r "actions/setup-node@v3" .github/workflows/; then
            echo "‚ö†Ô∏è Some workflows use actions/setup-node@v3 - consider upgrading to v4"
          fi
          
          # Check for deprecated actions
          if grep -r "actions/upload-artifact@v3" .github/workflows/; then
            echo "‚ö†Ô∏è Some workflows use actions/upload-artifact@v3 - consider upgrading to v4"
          fi
          
          echo "‚úÖ Workflow dependency check completed"
          
      - name: Validate workflow triggers
        run: |
          echo "üîç Validating workflow triggers..."
          
          # Check that critical workflows have proper triggers
          echo "Checking deployment workflow triggers..."
          
          if grep -q "on:" .github/workflows/deploy.yml && grep -A 5 "on:" .github/workflows/deploy.yml | grep -q "deployment:"; then
            echo "‚úÖ Production deployment has deployment trigger"
          else
            echo "‚ùå Production deployment missing deployment trigger"
          fi
          
          if grep -q "workflow_dispatch:" .github/workflows/rollback.yml; then
            echo "‚úÖ Rollback workflow has manual trigger"
          else
            echo "‚ùå Rollback workflow missing manual trigger"
          fi
          
          # Check for proper concurrency controls
          echo "Checking concurrency controls..."
          WORKFLOWS_WITH_CONCURRENCY=$(grep -l "concurrency:" .github/workflows/*.yml | wc -l)
          TOTAL_WORKFLOWS=$(ls .github/workflows/*.yml | wc -l)
          
          echo "Workflows with concurrency control: $WORKFLOWS_WITH_CONCURRENCY/$TOTAL_WORKFLOWS"
          
          if [ "$WORKFLOWS_WITH_CONCURRENCY" -lt 3 ]; then
            echo "‚ö†Ô∏è Some workflows may need concurrency controls"
          else
            echo "‚úÖ Concurrency controls appear adequate"
          fi

  # =============================================================================
  # SECRET CONFIGURATION VALIDATION
  # =============================================================================
  
  validate-secrets-configuration:
    name: Validate Secrets Configuration
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event.inputs.validation_type == 'full' || github.event.inputs.validation_type == 'secrets-only' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate secret references
        run: |
          echo "üîç Validating secret references in workflows..."
          
          # Extract all secret references
          grep -hr "secrets\." .github/workflows/ | sed 's/.*secrets\.//' | sed 's/[^A-Z_].*//' | sort | uniq > used_secrets.txt
          
          echo "Secrets referenced in workflows:"
          cat used_secrets.txt | sed 's/^/  - /'
          
          # Check for common required secrets
          REQUIRED_SECRETS=(
            "SHUTTLE_API_KEY"
            "PRODUCTION_API_URL" 
            "STAGING_API_BASE_URL"
            "VERCEL_TOKEN"
          )
          
          echo ""
          echo "Checking for required secrets..."
          for secret in "${REQUIRED_SECRETS[@]}"; do
            if grep -q "$secret" used_secrets.txt; then
              echo "‚úÖ $secret is referenced"
            else
              echo "‚ö†Ô∏è $secret not found in workflows"
            fi
          done
          
          # Check for consistent naming patterns
          echo ""
          echo "Checking secret naming patterns..."
          
          if grep -q "PRODUCTION_" used_secrets.txt && grep -q "STAGING_" used_secrets.txt; then
            echo "‚úÖ Consistent environment prefixes used"
          else
            echo "‚ö†Ô∏è Environment prefixes may be inconsistent"
          fi
          
          echo ""
          echo "Total unique secrets referenced: $(wc -l < used_secrets.txt)"

  # =============================================================================
  # PIPELINE FLOW VALIDATION
  # =============================================================================
  
  validate-pipeline-flow:
    name: Validate Pipeline Flow
    runs-on: ubuntu-latest
    timeout-minutes: 10
    if: github.event.inputs.validation_type == 'full' || github.event_name == 'schedule'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate deployment flow
        run: |
          echo "üîç Validating deployment pipeline flow..."
          
          # Check CI pipeline structure
          echo "Checking CI pipeline (ci.yml)..."
          if [ -f ".github/workflows/ci.yml" ]; then
            if grep -q "static-analysis" .github/workflows/ci.yml; then
              echo "‚úÖ CI has static analysis stage"
            else
              echo "‚ùå CI missing static analysis stage"
            fi
            
            if grep -q "unit-tests\|test" .github/workflows/ci.yml; then
              echo "‚úÖ CI has testing stage"
            else
              echo "‚ùå CI missing testing stage"
            fi
            
            if grep -q "coverage" .github/workflows/ci.yml; then
              echo "‚úÖ CI has coverage checking"
            else
              echo "‚ö†Ô∏è CI missing coverage checking"
            fi
          else
            echo "‚ùå CI workflow not found"
          fi
          
          # Check staging deployment
          echo ""
          echo "Checking staging deployment (main.yml)..."
          if [ -f ".github/workflows/main.yml" ]; then
            if grep -q "staging" .github/workflows/main.yml; then
              echo "‚úÖ Staging deployment configured"
            else
              echo "‚ùå Staging deployment not found"
            fi
            
            if grep -q "smoke.*test\|e2e.*test\|regression.*test" .github/workflows/main.yml; then
              echo "‚úÖ Staging has automated testing"
            else
              echo "‚ö†Ô∏è Staging missing automated testing"
            fi
          else
            echo "‚ùå Main deployment workflow not found"
          fi
          
          # Check production deployment
          echo ""
          echo "Checking production deployment (deploy.yml)..."
          if [ -f ".github/workflows/deploy.yml" ]; then
            if grep -q "canary" .github/workflows/deploy.yml; then
              echo "‚úÖ Production has canary deployment"
            else
              echo "‚ö†Ô∏è Production missing canary deployment"
            fi
            
            if grep -q "soak.*test\|monitoring" .github/workflows/deploy.yml; then
              echo "‚úÖ Production has monitoring/soak testing"
            else
              echo "‚ö†Ô∏è Production missing soak testing"
            fi
            
            if grep -q "rollback" .github/workflows/deploy.yml; then
              echo "‚úÖ Production has rollback capability"
            else
              echo "‚ö†Ô∏è Production missing automatic rollback"
            fi
          else
            echo "‚ùå Production deployment workflow not found"
          fi

  # =============================================================================
  # VALIDATION SUMMARY
  # =============================================================================
  
  validation-summary:
    name: Validation Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [validate-workflow-syntax, validate-configuration, validate-workflow-dependencies, validate-secrets-configuration, validate-pipeline-flow]
    
    steps:
      - name: Generate validation summary
        run: |
          echo "## üîç Pipeline Validation Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "**Validation Type:** ${{ github.event.inputs.validation_type || 'scheduled-full' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Workflow syntax validation
          if [ "${{ needs.validate-workflow-syntax.result }}" == "success" ]; then
            echo "‚úÖ **Workflow Syntax:** All workflows have valid syntax" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-workflow-syntax.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Workflow Syntax:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Workflow Syntax:** Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Configuration validation
          if [ "${{ needs.validate-configuration.result }}" == "success" ]; then
            echo "‚úÖ **Configuration:** All configurations valid" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-configuration.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Configuration:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Configuration:** Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Dependencies validation
          if [ "${{ needs.validate-workflow-dependencies.result }}" == "success" ]; then
            echo "‚úÖ **Dependencies:** All dependencies current" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-workflow-dependencies.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Dependencies:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Dependencies:** Issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Secrets validation
          if [ "${{ needs.validate-secrets-configuration.result }}" == "success" ]; then
            echo "‚úÖ **Secrets:** Configuration appears valid" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-secrets-configuration.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Secrets:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Secrets:** Configuration issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Pipeline flow validation
          if [ "${{ needs.validate-pipeline-flow.result }}" == "success" ]; then
            echo "‚úÖ **Pipeline Flow:** All flows properly configured" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.validate-pipeline-flow.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è **Pipeline Flow:** Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Pipeline Flow:** Flow issues detected" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
          echo "- Review any failed validations above" >> $GITHUB_STEP_SUMMARY
          echo "- Update outdated action versions" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all required secrets are configured" >> $GITHUB_STEP_SUMMARY
          echo "- Regularly run pipeline validation" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next scheduled validation:** $(date -d 'next Sunday 2:00' -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY