name: PR Validation Pipeline

on:
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # STATIC ANALYSIS (Fast feedback, parallel execution)
  # =============================================================================
  
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          components: rustfmt, clippy
          override: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-
            
      - name: Check Rust formatting
        run: cargo fmt --all -- --check
        
      - name: Run Clippy
        run: cargo clippy --lib --all-features -- -D warnings -A unused-imports -A unused-variables -A dead-code -A unused-mut -A deprecated -A clippy::needless-borrows-for-generic-args -A unused-assignments -A clippy::assertions-on-constants
        
      - name: Security audit
        run: |
          cargo install --version 0.20.0 cargo-audit
          cargo audit
          
      - name: License compliance check
        run: |
          cargo install --version 0.4.3 cargo-license
          cargo license --avoid-dev-deps --avoid-build-deps

  frontend-static-analysis:
    name: Frontend Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: apps/web
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Lint
        run: pnpm lint
        
      - name: Type check
        run: pnpm type-check
        
      - name: Security audit
        run: pnpm audit --audit-level moderate

  # =============================================================================
  # UNIT TESTS (Fast, comprehensive coverage)
  # =============================================================================
  
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: static-analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          override: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-test-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-test-
            ${{ runner.os }}-cargo-
            
      - name: Run unit tests
        run: |
          cargo test --lib --workspace --verbose
          
      - name: Generate coverage report
        run: |
          curl -s https://api.github.com/repos/xd009642/tarpaulin/releases/latest \
            | grep "browser_download_url.*x86_64-unknown-linux-musl.tar.gz" \
            | cut -d : -f 2,3 \
            | tr -d \" \
            | wget -qi - -O tarpaulin.tar.gz
          tar -xzf tarpaulin.tar.gz
          sudo mv cargo-tarpaulin /usr/local/bin/
          cargo tarpaulin \
            --lib \
            --workspace \
            --timeout 120 \
            --out xml \
            --output-dir ./coverage
            
      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -oP 'line-rate="\K[^"]*' coverage/tarpaulin-report.xml | head -1)
          COVERAGE_PERCENT=$(echo "$COVERAGE * 100" | bc -l | cut -d'.' -f1)
          echo "Coverage: ${COVERAGE_PERCENT}%"
          if [ "$COVERAGE_PERCENT" -lt 85 ]; then
            echo "❌ Coverage ${COVERAGE_PERCENT}% is below required 85%"
            exit 1
          fi
          echo "✅ Coverage requirement met: ${COVERAGE_PERCENT}%"
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/tarpaulin-report.xml
          flags: backend
          name: backend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    defaults:
      run:
        working-directory: apps/web
    needs: frontend-static-analysis
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'
        
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run unit tests with coverage
        run: pnpm test:coverage
        
      - name: Check coverage threshold
        run: |
          COVERAGE=$(grep -oP '"pct":[^,]*' coverage/coverage-summary.json | head -1 | cut -d':' -f2)
          if [ "$COVERAGE" -lt 80 ]; then
            echo "❌ Frontend coverage $COVERAGE% is below required 80%"
            exit 1
          fi
          echo "✅ Frontend coverage requirement met: $COVERAGE%"
          
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/web/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # =============================================================================
  # INTEGRATION TESTS (Database, inter-service communication)
  # =============================================================================
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [backend-unit-tests, frontend-unit-tests]
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: gamalan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      qdrant:
        image: qdrant/qdrant:v1.8.1
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          override: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-integration-
            ${{ runner.os }}-cargo-
            
      - name: Run database migrations
        run: |
          cargo install sqlx-cli --no-default-features --features "postgres,uuid,tls-rustls"
          # Run migrations for all services
          find services -name "migrations" -type d | while read -r migration_dir; do
            service=$(basename $(dirname $migration_dir))
            echo "Running migrations for $service"
            DATABASE_URL="postgres://postgres:password@localhost:5432/gamalan_test" \
              sqlx migrate run --source "$migration_dir"
          done
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/gamalan_test
          
      - name: Run integration tests
        run: |
          cargo test --test '*' --workspace --verbose
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/gamalan_test
          QDRANT_URL: http://localhost:6333
          TEST_LOG: debug

  # =============================================================================
  # CONTRACT TESTS (OpenAPI validation)
  # =============================================================================
  
  contract-tests:
    name: Contract Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: integration-tests
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: gamalan_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          override: true
          
      - name: Install OpenAPI tools
        run: |
          npm install -g @apidevtools/swagger-cli
          curl -L https://github.com/stoplightio/spectral/releases/latest/download/spectral-linux -o spectral
          chmod +x spectral
          sudo mv spectral /usr/local/bin/
          
      - name: Validate OpenAPI specifications
        run: |
          find services -name "openapi.yaml" | while read -r spec; do
            service=$(basename $(dirname $(dirname $spec)))
            echo "Validating OpenAPI spec for $service"
            swagger-cli validate "$spec"
            spectral lint "$spec" --ruleset .spectral.yml
          done
          
      - name: Run contract tests
        run: |
          # Start services in background for contract testing
          cargo build --workspace
          # Run contract validation tests
          cargo test contract --workspace --verbose
        env:
          DATABASE_URL: postgres://postgres:password@localhost:5432/gamalan_test

  # =============================================================================
  # BUILD VERIFICATION
  # =============================================================================
  
  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [integration-tests, contract-tests]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          override: true
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-build-
            ${{ runner.os }}-cargo-
            
      - name: Build API Gateway (consolidated services)
        run: |
          echo "Building consolidated API Gateway containing all services..."
          cargo build --release --package api-gateway
          echo "✅ Consolidated API Gateway built successfully"
          echo "   - Includes: projects, backlog, readiness, prompt-builder, context-orchestrator services"
          echo "   - Single binary deployment: target/release/api-gateway"
        
      - name: Build frontend
        working-directory: apps/web
        run: |
          pnpm install --frozen-lockfile
          pnpm run build
        env:
          # Use test environment variables from secrets
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
          CLERK_SECRET_KEY: ${{ secrets.TEST_CLERK_SECRET_KEY }}
          NEXT_PUBLIC_API_BASE_URL: http://localhost:8000
          
      - name: Test Docker builds
        run: |
          # Test that we can build Docker images
          echo "Testing Docker builds..."
          # For now just verify Dockerfiles exist
          find . -name "Dockerfile" -exec echo "Found Dockerfile: {}" \;

  # =============================================================================
  # SUMMARY & NOTIFICATIONS
  # =============================================================================
  
  pr-summary:
    name: PR Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [static-analysis, frontend-static-analysis, backend-unit-tests, frontend-unit-tests, integration-tests, contract-tests, build-verification]
    
    steps:
      - name: PR Status Summary
        run: |
          echo "## 🚀 PR Validation Results" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.static-analysis.result }}" == "success" ]; then
            echo "✅ Static Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.frontend-static-analysis.result }}" == "success" ]; then
            echo "✅ Frontend Static Analysis: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend Static Analysis: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.backend-unit-tests.result }}" == "success" ]; then
            echo "✅ Backend Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.frontend-unit-tests.result }}" == "success" ]; then
            echo "✅ Frontend Unit Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend Unit Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.integration-tests.result }}" == "success" ]; then
            echo "✅ Integration Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Integration Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.contract-tests.result }}" == "success" ]; then
            echo "✅ Contract Tests: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Contract Tests: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.build-verification.result }}" == "success" ]; then
            echo "✅ Build Verification: Passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build Verification: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready to merge:** All checks must pass" >> $GITHUB_STEP_SUMMARY