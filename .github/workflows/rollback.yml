name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      rollback_target:
        description: 'What to rollback'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - backend
          - frontend
          - canary-only
      rollback_version:
        description: 'Target version to rollback to (leave empty for previous stable)'
        required: false
        type: string
      reason:
        description: 'Rollback reason'
        required: true
        type: string
      create_incident:
        description: 'Create incident issue'
        required: false
        default: true
        type: boolean
      skip_verification:
        description: 'Skip post-rollback verification (emergency only)'
        required: false
        default: false
        type: boolean

concurrency:
  group: emergency-rollback
  cancel-in-progress: false

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # =============================================================================
  # ROLLBACK VALIDATION & PREPARATION
  # =============================================================================
  
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      should_rollback: ${{ steps.validation.outputs.should_rollback }}
      target_version: ${{ steps.validation.outputs.target_version }}
      rollback_scope: ${{ steps.validation.outputs.rollback_scope }}
      
    steps:
      - name: Validate rollback parameters
        id: validation
        run: |
          TARGET="${{ github.event.inputs.rollback_target }}"
          VERSION="${{ github.event.inputs.rollback_version }}"
          REASON="${{ github.event.inputs.reason }}"
          
          echo "üö® EMERGENCY ROLLBACK REQUEST"
          echo "Target: $TARGET"
          echo "Version: ${VERSION:-'previous-stable'}"
          echo "Reason: $REASON"
          echo "Requested by: ${{ github.actor }}"
          echo "Time: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
          
          # Validation
          if [ -z "$REASON" ]; then
            echo "‚ùå Rollback reason is required"
            exit 1
          fi
          
          # Determine target version
          if [ -z "$VERSION" ]; then
            # Get the previous stable version (simulate)
            TARGET_VERSION="previous-stable"
            echo "Using previous stable version"
          else
            TARGET_VERSION="$VERSION"
            echo "Using specified version: $TARGET_VERSION"
          fi
          
          echo "should_rollback=true" >> $GITHUB_OUTPUT
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT
          echo "rollback_scope=$TARGET" >> $GITHUB_OUTPUT

  # =============================================================================
  # BACKEND ROLLBACK
  # =============================================================================
  
  rollback-backend:
    name: Rollback Backend Services
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should_rollback == 'true' && (github.event.inputs.rollback_target == 'all' || github.event.inputs.rollback_target == 'backend')
    
    strategy:
      matrix:
        service: [api-gateway]
        # Note: Since we're using consolidated API Gateway, we only need to rollback the main service
        # All microservices (projects, backlog, readiness, prompt-builder, context-orchestrator) are included
      fail-fast: false
      max-parallel: 1
      
    steps:
      - name: Setup Shuttle CLI
        run: |
          cargo install cargo-shuttle --version 0.47.0
          
      - name: Rollback service with enhanced error handling
        run: |
          echo "üîÑ Rolling back ${{ matrix.service }} to ${{ needs.validate-rollback.outputs.target_version }}"
          
          # Enhanced error handling with retries
          retry_command() {
            local cmd="$1"
            local max_attempts=3
            local wait_time=10
            
            for attempt in $(seq 1 $max_attempts); do
              echo "Attempt $attempt/$max_attempts: $cmd"
              if eval "$cmd"; then
                return 0
              else
                if [ $attempt -lt $max_attempts ]; then
                  echo "Command failed, waiting ${wait_time}s before retry..."
                  sleep $wait_time
                else
                  echo "Command failed after $max_attempts attempts"
                  return 1
                fi
              fi
            done
          }
          
          # Login with retry
          if ! retry_command "shuttle login --api-key ${{ secrets.SHUTTLE_API_KEY }}"; then
            echo "‚ùå Failed to login to Shuttle after multiple attempts"
            exit 1
          fi
          
          # Get current service status before rollback
          echo "Getting current status for ${{ matrix.service }}..."
          CURRENT_STATUS=$(shuttle project status --name "${{ matrix.service }}" 2>/dev/null || echo "unknown")
          echo "Current status: $CURRENT_STATUS"
          
          # Stop any canary deployments first
          echo "Checking for canary deployments..."
          CANARY_PROJECTS=$(shuttle project list 2>/dev/null | grep "${{ matrix.service }}-canary" || true)
          if [ -n "$CANARY_PROJECTS" ]; then
            echo "Found canary deployments for ${{ matrix.service }}"
            echo "$CANARY_PROJECTS" | while read -r canary_project; do
              if [ -n "$canary_project" ]; then
                echo "Stopping canary: $canary_project"
                shuttle project stop --name "$canary_project" 2>/dev/null || echo "Failed to stop $canary_project"
              fi
            done
          else
            echo "No canary deployments found for ${{ matrix.service }}"
          fi
          
          # Perform rollback with enhanced error handling
          if [ "${{ needs.validate-rollback.outputs.target_version }}" == "previous-stable" ]; then
            echo "Rolling back ${{ matrix.service }} to previous stable deployment"
            if ! retry_command "shuttle rollback --project ${{ matrix.service }}"; then
              echo "‚ö†Ô∏è Automatic rollback failed, attempting manual recovery"
              # Try alternative rollback method
              echo "Attempting deployment list retrieval..."
              DEPLOYMENTS=$(shuttle project deployments --name "${{ matrix.service }}" 2>/dev/null || echo "")
              if [ -n "$DEPLOYMENTS" ]; then
                echo "Available deployments: $DEPLOYMENTS"
              else
                echo "‚ùå Could not retrieve deployment history"
              fi
            fi
          else
            echo "Rolling back ${{ matrix.service }} to specific version: ${{ needs.validate-rollback.outputs.target_version }}"
            if ! retry_command "shuttle deploy --project ${{ matrix.service }} --version ${{ needs.validate-rollback.outputs.target_version }}"; then
              echo "‚ùå Version-specific rollback failed for ${{ matrix.service }}"
              exit 1
            fi
          fi
          
          # Enhanced verification with multiple attempts
          echo "Verifying rollback for ${{ matrix.service }}..."
          SERVICE_URL="https://${{ matrix.service }}.shuttle.app"
          VERIFICATION_ATTEMPTS=6
          VERIFICATION_WAIT=15
          
          for attempt in $(seq 1 $VERIFICATION_ATTEMPTS); do
            echo "Verification attempt $attempt/$VERIFICATION_ATTEMPTS..."
            
            response=$(curl -s -o /dev/null -w "%{http_code},%{time_total}" --max-time 10 "$SERVICE_URL/health" || echo "000,999")
            http_code=$(echo $response | cut -d',' -f1)
            response_time=$(echo $response | cut -d',' -f2)
            
            if [ "$http_code" == "200" ]; then
              echo "‚úÖ ${{ matrix.service }} rollback verified (${response_time}s)"
              echo "rollback_status=success" >> $GITHUB_OUTPUT
              break
            else
              if [ $attempt -eq $VERIFICATION_ATTEMPTS ]; then
                echo "‚ùå ${{ matrix.service }} verification failed after $VERIFICATION_ATTEMPTS attempts (HTTP $http_code)"
                echo "rollback_status=failed" >> $GITHUB_OUTPUT
                
                # Get additional diagnostics
                echo "Additional diagnostics for ${{ matrix.service }}:"
                shuttle project status --name "${{ matrix.service }}" 2>/dev/null || echo "Could not get project status"
                curl -I --max-time 5 "$SERVICE_URL" || echo "Could not get response headers"
              else
                echo "‚ö†Ô∏è ${{ matrix.service }} not ready (HTTP $http_code), waiting ${VERIFICATION_WAIT}s..."
                sleep $VERIFICATION_WAIT
              fi
            fi
          done

  # =============================================================================
  # FRONTEND ROLLBACK
  # =============================================================================
  
  rollback-frontend:
    name: Rollback Frontend
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should_rollback == 'true' && (github.event.inputs.rollback_target == 'all' || github.event.inputs.rollback_target == 'frontend')
    
    steps:
      - name: Rollback Vercel deployment
        run: |
          echo "üîÑ Rolling back frontend to ${{ needs.validate-rollback.outputs.target_version }}"
          
          # Get list of deployments
          DEPLOYMENTS=$(curl -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            "https://api.vercel.com/v6/deployments?projectId=${{ secrets.VERCEL_PROJECT_ID }}&limit=10")
          
          if [ "${{ needs.validate-rollback.outputs.target_version }}" == "previous-stable" ]; then
            # Find the last successful production deployment
            ROLLBACK_DEPLOYMENT=$(echo "$DEPLOYMENTS" | jq -r '.deployments[] | select(.target == "production" and .state == "READY") | .uid' | head -2 | tail -1)
          else
            # Find deployment by version/alias
            ROLLBACK_DEPLOYMENT=$(echo "$DEPLOYMENTS" | jq -r ".deployments[] | select(.alias[] | contains(\"${{ needs.validate-rollback.outputs.target_version }}\")) | .uid" | head -1)
          fi
          
          if [ -n "$ROLLBACK_DEPLOYMENT" ] && [ "$ROLLBACK_DEPLOYMENT" != "null" ]; then
            echo "Rolling back to deployment: $ROLLBACK_DEPLOYMENT"
            
            # Promote the deployment to production
            curl -X PATCH \
              -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d '{"target": "production"}' \
              "https://api.vercel.com/v13/deployments/$ROLLBACK_DEPLOYMENT"
              
            echo "‚úÖ Frontend rollback initiated"
          else
            echo "‚ùå Could not find deployment to rollback to"
            exit 1
          fi

  # =============================================================================
  # CANARY CLEANUP
  # =============================================================================
  
  cleanup-canary:
    name: Clean Up Canary Deployments
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-rollback
    if: needs.validate-rollback.outputs.should_rollback == 'true' && (github.event.inputs.rollback_target == 'all' || github.event.inputs.rollback_target == 'canary-only')
    
    steps:
      - name: Setup Shuttle CLI
        run: |
          cargo install cargo-shuttle --version 0.47.0
          
      - name: Clean up all canary deployments
        run: |
          echo "üßπ Cleaning up all canary deployments"
          
          shuttle login --api-key ${{ secrets.SHUTTLE_API_KEY }}
          
          # List all projects and find canaries
          PROJECTS=$(shuttle project list 2>/dev/null || echo "")
          
          if [ -n "$PROJECTS" ]; then
            echo "$PROJECTS" | grep -E "(canary|staging)" | while read -r project; do
              if [ -n "$project" ]; then
                echo "Removing canary project: $project"
                # shuttle project stop --name "$project" 2>/dev/null || true
                echo "Simulated cleanup of $project"
              fi
            done
          fi
          
          echo "‚úÖ Canary cleanup completed"

  # =============================================================================
  # POST-ROLLBACK VERIFICATION
  # =============================================================================
  
  verify-rollback:
    name: Verify Rollback Success
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-rollback, rollback-backend, rollback-frontend, cleanup-canary]
    if: always() && needs.validate-rollback.outputs.should_rollback == 'true' && github.event.inputs.skip_verification != 'true'
    
    steps:
      - name: Wait for services to stabilize
        run: |
          echo "Waiting 60 seconds for services to stabilize..."
          sleep 60
          
      - name: Verify backend services
        if: github.event.inputs.rollback_target == 'all' || github.event.inputs.rollback_target == 'backend'
        run: |
          echo "üîç Verifying backend services..."
          
          SERVICES="api-gateway auth-gateway projects backlog readiness prompt-builder context-orchestrator"
          FAILED_SERVICES=""
          
          for service in $SERVICES; do
            echo "Checking $service..."
            
            SERVICE_URL="https://$service.shuttle.app"
            
            # Health check
            if curl -f -s "$SERVICE_URL/health" > /dev/null; then
              echo "‚úÖ $service: Health check passed"
            else
              echo "‚ùå $service: Health check failed"
              FAILED_SERVICES="$FAILED_SERVICES $service"
            fi
            
            # Ready check
            if curl -f -s "$SERVICE_URL/ready" > /dev/null; then
              echo "‚úÖ $service: Ready check passed"
            else
              echo "‚ö†Ô∏è $service: Ready check failed"
            fi
          done
          
          if [ -n "$FAILED_SERVICES" ]; then
            echo "‚ùå Some services failed health checks: $FAILED_SERVICES"
            exit 1
          fi
          
          echo "‚úÖ All backend services are healthy"
          
      - name: Verify frontend
        if: github.event.inputs.rollback_target == 'all' || github.event.inputs.rollback_target == 'frontend'
        run: |
          echo "üîç Verifying frontend..."
          
          FRONTEND_URL="${{ secrets.PRODUCTION_FRONTEND_URL }}"
          
          # Basic connectivity
          if curl -f -s "$FRONTEND_URL" > /dev/null; then
            echo "‚úÖ Frontend: Basic connectivity check passed"
          else
            echo "‚ùå Frontend: Basic connectivity check failed"
            exit 1
          fi
          
          # API connectivity (check if frontend can reach backend)
          API_URL="${{ secrets.PRODUCTION_API_URL }}"
          if curl -f -s "$API_URL/health" > /dev/null; then
            echo "‚úÖ Frontend can reach backend API"
          else
            echo "‚ùå Frontend cannot reach backend API"
            exit 1
          fi
          
          echo "‚úÖ Frontend verification passed"
          
      - name: Run basic smoke tests
        run: |
          echo "üîç Running basic smoke tests..."
          
          # Test critical endpoints
          API_URL="${{ secrets.PRODUCTION_API_URL }}"
          
          ENDPOINTS="health ready api/v1/projects api/v1/stories api/v1/readiness"
          
          for endpoint in $ENDPOINTS; do
            echo "Testing $endpoint..."
            
            response=$(curl -s -o /dev/null -w "%{http_code}" "$API_URL/$endpoint" || echo "000")
            
            if [ "$response" = "200" ] || [ "$response" = "401" ]; then
              echo "‚úÖ $endpoint: OK ($response)"
            else
              echo "‚ùå $endpoint: Failed ($response)"
            fi
          done
          
          echo "‚úÖ Smoke tests completed"

  # =============================================================================
  # INCIDENT MANAGEMENT
  # =============================================================================
  
  create-incident:
    name: Create Incident Report
    runs-on: ubuntu-latest
    needs: [validate-rollback, rollback-backend, rollback-frontend, cleanup-canary, verify-rollback]
    if: always() && needs.validate-rollback.outputs.should_rollback == 'true' && github.event.inputs.create_incident == 'true'
    
    steps:
      - name: Determine rollback status
        id: status
        run: |
          BACKEND_STATUS="${{ needs.rollback-backend.result }}"
          FRONTEND_STATUS="${{ needs.rollback-frontend.result }}"
          CLEANUP_STATUS="${{ needs.cleanup-canary.result }}"
          VERIFY_STATUS="${{ needs.verify-rollback.result }}"
          
          if [ "$BACKEND_STATUS" = "success" ] && [ "$FRONTEND_STATUS" = "success" ] && [ "$CLEANUP_STATUS" = "success" ] && [ "$VERIFY_STATUS" = "success" ]; then
            STATUS="‚úÖ SUCCESSFUL"
          elif [ "$BACKEND_STATUS" = "skipped" ] && [ "$FRONTEND_STATUS" = "skipped" ] && [ "$CLEANUP_STATUS" = "success" ]; then
            STATUS="‚úÖ SUCCESSFUL (Canary cleanup only)"
          else
            STATUS="‚ö†Ô∏è PARTIAL/FAILED"
          fi
          
          echo "status=$STATUS" >> $GITHUB_OUTPUT
          
      - name: Create incident issue
        uses: actions/github-script@v7
        with:
          script: |
            const rollbackScope = "${{ needs.validate-rollback.outputs.rollback_scope }}";
            const targetVersion = "${{ needs.validate-rollback.outputs.target_version }}";
            const reason = "${{ github.event.inputs.reason }}";
            const status = "${{ steps.status.outputs.status }}";
            
            const body = `## üö® Emergency Rollback Report
            
            ### Rollback Details
            - **Status:** ${status}
            - **Scope:** ${rollbackScope}
            - **Target Version:** ${targetVersion}
            - **Initiated By:** ${{ github.actor }}
            - **Time:** ${new Date().toISOString()}
            - **Reason:** ${reason}
            
            ### Actions Taken
            - **Backend Rollback:** ${{ needs.rollback-backend.result || 'skipped' }}
            - **Frontend Rollback:** ${{ needs.rollback-frontend.result || 'skipped' }}
            - **Canary Cleanup:** ${{ needs.cleanup-canary.result || 'skipped' }}
            - **Verification:** ${{ needs.verify-rollback.result || 'skipped' }}
            
            ### Next Steps
            - [ ] Investigate root cause of the issue that triggered rollback
            - [ ] Implement fix for identified issues
            - [ ] Test fix in staging environment
            - [ ] Plan and schedule next deployment
            - [ ] Update monitoring/alerting if needed
            - [ ] Conduct post-incident review
            
            ### Links
            - **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            - **Deployment Dashboard:** [View Production Status](https://your-monitoring-url.com)
            
            ---
            *This incident was created automatically by the emergency rollback workflow.*`;
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `üö® Emergency Rollback: ${reason}`,
              body: body,
              labels: ['incident', 'rollback', 'production', 'urgent'],
              assignees: ['${{ github.actor }}']
            });

  # =============================================================================
  # NOTIFICATIONS & SUMMARY
  # =============================================================================
  
  rollback-summary:
    name: Rollback Summary
    runs-on: ubuntu-latest
    if: always()
    needs: [validate-rollback, rollback-backend, rollback-frontend, cleanup-canary, verify-rollback, create-incident]
    
    steps:
      - name: Generate rollback summary
        run: |
          echo "## üö® Emergency Rollback Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
          echo "**Reason:** ${{ github.event.inputs.reason }}" >> $GITHUB_STEP_SUMMARY
          echo "**Scope:** ${{ github.event.inputs.rollback_target }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ needs.validate-rollback.outputs.target_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Results
          if [ "${{ needs.rollback-backend.result }}" = "success" ] || [ "${{ needs.rollback-backend.result }}" = "skipped" ]; then
            echo "‚úÖ **Backend Rollback:** ${{ needs.rollback-backend.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Backend Rollback:** ${{ needs.rollback-backend.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.rollback-frontend.result }}" = "success" ] || [ "${{ needs.rollback-frontend.result }}" = "skipped" ]; then
            echo "‚úÖ **Frontend Rollback:** ${{ needs.rollback-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Frontend Rollback:** ${{ needs.rollback-frontend.result }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.cleanup-canary.result }}" = "success" ]; then
            echo "‚úÖ **Canary Cleanup:** Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **Canary Cleanup:** Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ needs.verify-rollback.result }}" = "success" ]; then
            echo "‚úÖ **Verification:** All checks passed" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.verify-rollback.result }}" = "skipped" ]; then
            echo "‚è≠Ô∏è **Verification:** Skipped (emergency mode)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è **Verification:** Some checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** Production systems have been rolled back" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:** Review incident report and plan remediation" >> $GITHUB_STEP_SUMMARY

      - name: Notify team (Slack/Teams/etc)
        run: |
          echo "üö® EMERGENCY ROLLBACK COMPLETED"
          echo "Scope: ${{ github.event.inputs.rollback_target }}"
          echo "Reason: ${{ github.event.inputs.reason }}"
          echo "Status: Production systems rolled back"
          echo ""
          echo "Incident report created and team notified."
          echo "Please review the incident and plan next steps."