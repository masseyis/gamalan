name: Deploy to Shuttle

on:
  push:
    branches: [ main ]
    paths: [ 'services/**', 'libs/**' ]
  workflow_dispatch:
    inputs:
      service:
        description: 'Service to deploy (or "all" for all services)'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - auth-gateway
        - projects
        - backlog
        - readiness
        - prompt-builder

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [auth-gateway, projects, backlog, readiness, prompt-builder]
        exclude:
          - service: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.service != 'all' && github.event.inputs.service != matrix.service && matrix.service }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.79
          override: true

      - name: Install Shuttle CLI
        run: |
          curl -sSfL https://www.shuttle.rs/install | bash
          echo "${HOME}/.cargo/bin" >> $GITHUB_PATH

      - name: Login to Shuttle
        run: shuttle login --api-key ${{ secrets.SHUTTLE_API_KEY }}
        working-directory: services/${{ matrix.service }}

      - name: Deploy service
        run: |
          # Check if project exists, create if not
          if ! shuttle project status 2>/dev/null; then
            echo "Creating new project..."
            shuttle project new --name ${{ matrix.service }}
          fi
          
          # Deploy the service
          shuttle deploy
        working-directory: services/${{ matrix.service }}
        env:
          # Add environment variables needed by services
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          CLERK_WEBHOOK_SECRET: ${{ secrets.CLERK_WEBHOOK_SECRET }}
          CLERK_JWKS_URL: ${{ secrets.CLERK_JWKS_URL }}
          CLERK_JWT_ISSUER: ${{ secrets.CLERK_JWT_ISSUER }}
          CLERK_JWT_AUDIENCE: ${{ secrets.CLERK_JWT_AUDIENCE }}

  notify:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
      - name: Notify deployment status
        run: |
          if [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ All services deployed successfully to Shuttle"
          else
            echo "❌ Deployment failed"
            exit 1
          fi